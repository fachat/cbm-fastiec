
; from: http://cbmrom.trikaliotis.net/full/floppyrom.a65.full.html

   426:  DRVTRK          := $0022

   434:  BITCNT          := $0037

   464:  AF              := $005F

   483:  LSNADR          := $0077
   484:  TLKADR          := $0078
   485:  LSNACT          := $0079
   486:  TLKACT          := $007A

   488:  ATNPND          := $007C                ; 0 if there is no ATN pending, 1 if it is. This is used to tell the main loop that the IEC/IEEE bus must be processed.
   489:  ATNMOD          := $007D

   494:  LINDX           := $0082

   495:  SA              := $0083
   496:  ORGSA           := $0084
   497:  DATA            := $0085

   511:  CONT            := $0098

   537:  CHNRDY          := $00F2
   538:  EIOFLG          := $00F8

   577:  L023E           := $023E

   584:  CMD             := $024D

   662:  VIA_O_PB        :=  0
   663:  VIA_O_PA        :=  1
   664:  VIA_O_DDRB      :=  2
   665:  VIA_O_DDRA      :=  3
   666:  VIA_O_T1CL      :=  4
   667:  VIA_O_T1CH      :=  5
   668:  VIA_O_T1CLL     :=  6
   669:  VIA_O_T1CHL     :=  7
   670:  VIA_O_T2CL      :=  8
   671:  VIA_O_T2CH      :=  9
   672:  VIA_O_SR        := 10
   673:  VIA_O_ACR       := 11
   674:  VIA_O_PCR       := 12
   675:  VIA_O_IFR       := 13
   676:  VIA_O_IEC       := 14
   677:  VIA_O_PA_NO_HS  := 15
   678:  
   679:  VIA_IFR_B_CA2           := $01 ; cleared by read or write to PA
   680:  VIA_IFR_B_CA1           := $02 ; cleared by read or write to PA
   681:  VIA_IFR_B_SR            := $04 ; cleared by read or write to SR
   682:  VIA_IFR_B_CB2           := $08 ; cleared by read or write to PB
   683:  VIA_IFR_B_CB1           := $10 ; cleared by read or write to PB
   684:  VIA_IFR_B_T2            := $20 ; cleared by read T2L or write T2H
   685:  VIA_IFR_B_T1            := $40 ; cleared by read T1L or write T1H
   686:  VIA_IFR_B_ANY           := $80 ; cleared if all interrupts are cleared
   687:  
   688:  VIA_IER_B_CA2           := VIA_IFR_B_CA2
   689:  VIA_IER_B_CA1           := VIA_IFR_B_CA1
   690:  VIA_IER_B_SR            := VIA_IFR_B_SR
   691:  VIA_IER_B_CB2           := VIA_IFR_B_CB2
   692:  VIA_IER_B_CB1           := VIA_IFR_B_CB1
   693:  VIA_IER_B_T2            := VIA_IFR_B_T2
   694:  VIA_IER_B_T1            := VIA_IFR_B_T1
   695:  VIA_IER_BW_SET          := $80
   696:  VIA_IER_BW_UNSET        := $00
   697:  
   698:  VIA_PCR_B_CA1_INPUT_POS_EDGE            := $01          ; 1 = input on positive edge, 0 = input on negative edge
   699:  VIA_PCR_B_CA2_MASK                      := $0E
   700:  VIA_PCR_B_CA2_INPUT_NEG_CLEAR_ON_READ   := $00
   701:  VIA_PCR_B_CA2_INPUT_NEG                 := $02
   702:  VIA_PCR_B_CA2_INPUT_POS_CLEAR_ON_READ   := $04
   703:  VIA_PCR_B_CA2_INPUT_POS                 := $06
   704:  VIA_PCR_B_CA2_OUTPUT_HANDSHAKE          := $08
   705:  VIA_PCR_B_CA2_OUTPUT_PULSE              := $0A
   706:  VIA_PCR_B_CA2_OUTPUT_LOW                := $0C
   707:  VIA_PCR_B_CA2_OUTPUT_HIGH               := $0E
   708:  VIA_PCR_B_CB1_INPUT_POS_EDGE            := $10          ; 1 = input on positive edge, 0 = input on negative edge
   709:  VIA_PCR_B_CB2_MASK                      := $E0
   710:  VIA_PCR_B_CB2_INPUT_NEG_CLEAR_ON_READ   := $00
   711:  VIA_PCR_B_CB2_INPUT_NEG                 := $20
   712:  VIA_PCR_B_CB2_INPUT_POS_CLEAR_ON_READ   := $40
   713:  VIA_PCR_B_CB2_INPUT_POS                 := $60
   714:  VIA_PCR_B_CB2_OUTPUT_HANDSHAKE          := $80
   715:  VIA_PCR_B_CB2_OUTPUT_PULSE              := $A0
   716:  VIA_PCR_B_CB2_OUTPUT_LOW                := $C0
   717:  VIA_PCR_B_CB2_OUTPUT_HIGH               := $E0
   718:  
   719:  VIA_ACR_B_PA_LATCH_ENABLE               := $01
   720:  VIA_ACR_B_PB_LATCH_ENABLE               := $02
   721:  VIA_ACR_B_SHIFT_MASK                    := $1C
   722:  VIA_ACR_B_SHIFT_DISABLED                := $00
   723:  VIA_ACR_B_SHIFT_IN_T2                   := $04
   724:  VIA_ACR_B_SHIFT_IN_PHI2                 := $08
   725:  VIA_ACR_B_SHIFT_IN_EXTCLOCK_CB1         := $0C
   726:  VIA_ACR_B_SHIFT_FREERUNNING_T2          := $10
   727:  VIA_ACR_B_SHIFT_OUT_T2                  := $14
   728:  VIA_ACR_B_SHIFT_OUT_PHI2                := $18
   729:  VIA_ACR_B_SHIFT_OUT_EXTCLOCK_CB1        := $1C
   730:  VIA_ACR_B_T2_CONTROL_PB6                := $20
   731:  VIA_ACR_B_T1_CONTROL_MASK               := $C0
   732:  VIA_ACR_B_T1_CONTROL_ONESHOT            := $00
   733:  VIA_ACR_B_T1_CONTROL_FREERUN            := $40
   734:  VIA_ACR_B_T1_CONTROL_ONESHOT_PB7        := $80
   735:  VIA_ACR_B_T1_CONTROL_FREERUN_PB7        := $C0
   736:  
   737:  ; Alternative:
   738:  VIA_ACR_B_T1_CONTROL_ONETIME            := $40
   739:  VIA_ACR_B_T1_CONTROL_PB7_OUTPUT         := $80

   742:  VBC_PB1         := VBC + VIA_O_PB
   743:  
   744:  .if CompileDrive >= DRIVE_1540
   745:  
   746:  VBC_PA1_01            := $01
   747:  VBC_PA1_02            := $02
   748:  VBC_PA1_04            := $04
   749:  VBC_PA1_20            := $20
   750:  VBC_PA1_80            := $80
   751:  
   752:  VBC_PB1_1540_DATAIN    := $01 ; DATA IN
   753:  VBC_PB1_1540_DATAOUT   := $02 ; DATA OUT
   754:  VBC_PB1_1540_CLOCKIN   := $04 ; CLOCK IN
   755:  VBC_PB1_1540_CLOCKOUT  := $08 ; CLOCK OUT
   756:  VBC_PB1_1540_ATNA      := $10 ; ATNA (if ATNA XOR ATNIN == 1 --> assert DATA, regardless of DATA IN. In this case, DATA OUT is 1 if read)
   757:  VBC_PB1_1540_DEVICENO0 := $20 ; hardware device no., bit 0
   758:  VBC_PB1_1540_DEVICENO1 := $40 ; hardware device no., bit 1
   759:  VBC_PB1_1540_ATNIN     := $80 ; ATN IN (also to CB2 - according to schematic: CA1, NOT CB2!)


   741:  VBC             := $1800

   783:  VBC_PA1         := VBC + VIA_O_PA       ; unused on the (original) 1541; parallel input/output on 2031
   784:  VBC_DDRB1       := VBC + VIA_O_DDRB
   785:  VBC_DDRA1       := VBC + VIA_O_DDRA
   786:  VBC_T1LC1       := VBC + VIA_O_T1CL
   787:  VBC_T1HC1       := VBC + VIA_O_T1CH
   788:  VBC_T1LL1       := VBC + VIA_O_T1CLL
   789:  VBC_T1HL1       := VBC + VIA_O_T1CHL
   790:  VBC_T2LC1       := VBC + VIA_O_T2CL
   791:  VBC_T2HC1       := VBC + VIA_O_T2CH
   792:  VBC_SR1         := VBC + VIA_O_SR
   793:  VBC_ACR1        := VBC + VIA_O_ACR
   794:  VBC_PCR1        := VBC + VIA_O_PCR
   795:  VBC_IFR1        := VBC + VIA_O_IFR
   796:  VBC_IER1        := VBC + VIA_O_IEC
   797:  VBC_PAUNBUF1    := VBC + VIA_O_PA_NO_HS


   852:  CIA_O_PA       :=  0
   853:  CIA_O_PB       :=  1
   854:  CIA_O_DDRA     :=  2
   855:  CIA_O_DDRB     :=  3
   856:  CIA_O_TALO     :=  4
   857:  CIA_O_TAHI     :=  5
   858:  CIA_O_TBLO     :=  6
   859:  CIA_O_TBHI     :=  7
   860:  CIA_O_TOD10THS :=  8
   861:  CIA_O_TODSEC   :=  9
   862:  CIA_O_TODMIN   := 10
   863:  CIA_O_TODHR    := 11
   864:  CIA_O_SDR      := 12
   865:  CIA_O_ICR      := 13
   866:  CIA_O_CRA      := 14
   867:  CIA_O_CRB      := 15
   868:  
   869:  CIA_ICR_B_TA            := $01  ; bit: timer A underflow
   870:  CIA_ICR_B_TB            := $02  ; bit: timer B underflow
   871:  CIA_ICR_B_TOD           := $04  ; bit: TOD alarm
   872:  CIA_ICR_B_SP            := $08  ; bit: Serial port full/empty
   873:  CIA_ICR_B_FLAG          := $10  ; bit: external -FLAG
   874:  CIA_ICR_B_UNUSED        := $60
   875:  CIA_ICR_BR_IR           := $80  ; bit: any interrupt occurred (read-only)
   876:  CIA_ICR_BW_SET          := $80  ; bit: set (=1) or clear (=0) bit (write-only)
   877:  CIA_ICR_BW_UNSET        := $00  ;
   878:  
   879:  CIA_CRA_B_START         := $01  ; 1 = start timer A, 0 = stop timer A
   880:  CIA_CRA_B_PBON          := $02  ; 1 = timer A output appears on PB6, 0 = PB6 is not affected by timer
   881:  CIA_CRA_B_TOGGLE        := $04  ; PB6 output mode: 1 = toggle, 0 = pulse
   882:  CIA_CRA_B_ONESHOT       := $08  ; 1 = one shot timer, 0 = continuous mode
   883:  CIA_CRA_B_FORCE_LOAD    := $10  ; 1 = force load (this is a strobe, that is, it will always be read as "0")
   884:  CIA_CRA_B_COUNT_CNT     := $20  ; 1 = timer A counts positive edges of CNT, 0 = timer A counts PHI2 pulses
   885:  CIA_CRA_B_SP_OUTPUT     := $40  ; 1 = serial port (SP) is output, 0 = it is input
   886:  CIA_CRA_B_50HZ          := $80  ; 1 = 50Hz clock at TOD, 0 = 60Hz clock
   887:  
   888:  CIA_CRB_B_START         := $01  ; 1 = start timer B, 0 = stop timer B
   889:  CIA_CRB_B_PBON          := $02  ; 1 = timer B output appears on PB7, 0 = PB7 is not affected by timer
   890:  CIA_CRB_B_TOGGLE        := $04  ; PB7 output mode: 1 = toggle, 0 = pulse
   891:  CIA_CRB_B_ONESHOT       := $08  ; 1 = one shot timer, 0 = continuous mode
   892:  CIA_CRB_B_FORCE_LOAD    := $10  ; 1 = force load (this is a strobe, that is, it will always be read as "0")
   893:  CIA_CRB_B_TOD_ALARM     := $80  ; 1 = writing to TOD registers sets ALARM, 0 = writing to TOD registers sets time-of-day
   894:  
   895:  CIA_CRB_B_MODE_MASK     := $60  ; mask bits for setting the timer B count mode
   896:  CIA_CRB_B_MODE_PHI2     := $00  ; timer B counts PHI2 pulses
   897:  CIA_CRB_B_MODE_CNT      := $20  ; timer B counts positive edges of CNT
   898:  CIA_CRB_B_MODE_TA_      := $40  ; timer B counts timer A underflows
   899:  CIA_CRB_B_MODE_TA_WITH_CNT      := $60  ; timer B counts timer A underflows which occur while CNT is high
   900:  
   901:  CIA             := $4000
   902:  CIA_TALO        := CIA + CIA_O_TALO
   903:  CIA_TAHI        := CIA + CIA_O_TAHI
   904:  CIA_SDR         := CIA + CIA_O_SDR
   905:  CIA_ICR         := CIA + CIA_O_ICR
   906:  CIA_CRA         := CIA + CIA_O_CRA
   907:  CIA_CRB         := CIA + CIA_O_CRB



DRIVE_UNKNOWN=0

   157:  DRIVE_2031=DRIVE_UNKNOWN + $10
   158:  DRIVE_2031_01=DRIVE_2031 + 1
   159:  
   160:  DRIVE_1540=DRIVE_2031 + $10
   161:  DRIVE_1540_01=DRIVE_1540 + 1
   162:  
   163:  DRIVE_1541=DRIVE_1540 + $10
   164:  DRIVE_1541_01=DRIVE_1541 + 1
   165:  DRIVE_1541_02=DRIVE_1541 + 2
   166:  DRIVE_1541_03=DRIVE_1541 + 3
   167:  DRIVE_1541_05=DRIVE_1541 + 5
   168:  DRIVE_1541_06AA=DRIVE_1541 + 6
   169:  
   170:  DRIVE_1541C=DRIVE_1541 + $10
   171:  DRIVE_1541C_01=DRIVE_1541C + 1
   172:  DRIVE_1541C_02=DRIVE_1541C + 2
   173:  DRIVE_1541C_03=DRIVE_1541C + 3
   174:  
   175:  DRIVE_1570=DRIVE_1541C + $10
   176:  DRIVE_1570_01=DRIVE_1570 + 1
   177:  
   178:  DRIVE_1571=DRIVE_1570 + $10
   179:  DRIVE_1571_03=DRIVE_1571 + 3
   180:  DRIVE_1571_05=DRIVE_1571 + 5
   181:  
   182:  DRIVE_1571CR=DRIVE_1571 + $10
   183:  DRIVE_1571CR_01=DRIVE_1571CR + 1

CompileDrive = DRIVE_1571_05


; ===================================
; This listing follows the CPU from the reset (abbreviated)
; to the entry into the Mainloop, which checks for ATN,
; and then to the IEC bus handling in that loop.


; ===================================
; after reset

 15538:          ; initialize the IEC bus on IEC devices
 15539:          ; for the 2031, this has already been done above
 15540:          ;
 15541:  .if CompileDrive >= DRIVE_1541_05
 15542:  
 15543:          ; set all lines inactive
 15544:          lda     #0
 15545:          sta     VBC_PB1
 15546:  
 15547:          ; now, set the DDR to mark the output lines DATAOUT, CLOCKOUT and ATNA
 15548:          lda     #VBC_PB1_1540_DATAOUT | VBC_PB1_1540_CLOCKOUT | VBC_PB1_1540_ATNA
 15549:          sta     VBC_DDRB1
 15567:  .endif

 15570:          jsr     LA786           ; @@@ TODO

; --
  6731:  LA786:
  6732:          lda     VBC_PA1
  6733:          and     # ~ VBC_PA1_20
  6734:          sta     VBC_PA1
  6735:  
  6736:          jsr     LA483			; delay loop
  6737:  
  6738:          ; also initialize the CIA
  6739:  
  6740:          lda     #CIA_ICR_BW_UNSET | ~ CIA_ICR_BW_SET
  6741:          sta     CIA_ICR
  6742:  
  6743:  .if CompileDrive >= DRIVE_1571CR
  6744:  .else
  6745:          lda     #CIA_CRA_B_ONESHOT
  6746:          sta     CIA_CRA
  6747:  ;       lda     #CIA_CRB_B_ONESHOT      ; same as CIA_CRA_B_ONESHOT, thus, it can be ommitted
  6748:          sta     CIA_CRB
  6749:          lda     #>$0006
  6750:          sta     CIA_TAHI
  6751:          lda     #<$0006
  6752:          sta     CIA_TALO
  6753:  
  6754:          lda     #CIA_CRA_B_START
  6755:          sta     CIA_CRA
  6756:  .endif
  6757:  
  6758:          jsr     L81B2			; init fast IEC SDR (to input, enable SR interrupt)
  6759:          jmp     TestATN
  6760:  
; --

 15579:  MainLoopEntry:
 15580:          cli                                     ; allow processing of job loop
 15581:  
 15582:  .if CompileDrive >= DRIVE_1540
 15583:          ; make sure to release IEC output lines
 15584:          ; we are sure that no IEC communication takes place when we reach here
 15585:          ;
 15586:          lda     VBC_PB1
 15587:          and     # ~ (VBC_PB1_1540_DATAOUT | VBC_PB1_1540_CLOCKOUT | VBC_PB1_1540_ATNA)
 15588:          sta     VBC_PB1
 15589:  .endif
 15590:  
 15591:          ; check if there is a command waiting in the command buffer (CMDBUF)
 15592:          ;
 15593:          lda     CMDWAT
 15594:          beq     MainLoop                        ; no -> branch to the loop
 15595:  
 15596:          lda     #$00
 15597:          sta     CMDWAT                          ; delete flag so we do not execute this again next time we reach the loop
 15598:  
 15599:          ; parse the command and execute it
 15600:  
 15601:  .if CompileDrive >= DRIVE_1570
 15602:          FillNOP 2
 15603:          jmp     Patch1570CallToParseCommandBufferAndExecuteCommand
 15604:  .else
 15605:          sta     NMIFLG                          ; @@@ TODO WHY? Seems unnecessary to me (and has been left out for 1570 and above)
 15606:          jsr     ParseCommandBufferAndExecuteCommand
 15607:  .endif

 15611:  MainLoop:
 15612:          cli                                     ; allow processing of job loop
 15613:  
 15614:          lda     ATNPND                          ; is there currently an ATN pending?
 15615:          beq     @SkipBusProcessing              ; no -> branch, skip bus processing
 15616:  
 15617:          ; there is an ATN pending.
 15618:          ; Process the bus to get the command the computer wants to give us
 15619:  
 15620:  .if CompileDrive >= DRIVE_1570
 15621:          jmp     ProcessBus1570                  ; for 1570 and above, check which bus routines have to be used
 15622:  .elseif CompileDrive >= DRIVE_1541C_02
 15623:          jmp     Patch_ClearPALatch_ProcessBus   ; like earlier drives, but make sure to "unlatch" the PA content to get current values upon read
 15624:  .else
 15625:          jmp     ProcessBus
 15626:  .endif

  6763:  ProcessBus1570:
  6764:  .if CompileDrive = DRIVE_1571_03
  6765:          lda     VBC_PAUNBUF1
  6766:  .else
  6767:          jsr     LAA62
; --
  7187:  LAA62:
  7188:          lda     VBC_PAUNBUF1
  7189:          bit     VBC_PA1
  7190:          rts
; --
  6768:  .endif
  6769:          and     #VBC_PA1_20
  6770:          beq     LA7BD
  6771:          jmp     L80CE
  6772:  LA7BD:
  6773:          jmp     ProcessBus

; ======================================================
; here we seem to have two very different bus loops - ProcessBus and L80CE.
; Need to understand which is which...
;
; It is decided on VIA1 PA.5 - which is the 1/2MHz signal!
; So, it seems that 0= 1 MHz, 1= 2 MHz
; 
; I.e. ProcessBus is the original 1MHz version, L80CE is the 2 MHz version
; So, we'll follow the 2 MHz version, to be sure we see the Fast IEC
; code.

  1125:  L80CE:
  1126:          sei                                     ; disallow interrupts --> blocking job loop
  1127:          lda     #$00
  1128:          sta     ATNPND
  1129:          sta     LSNACT
  1130:          sta     TLKACT
  1131:          ldx     #$45
  1132:          txs
  1133:          jsr     L81B2				; init CIA SDR (to input, enable SDR interrupt)
  1134:          lda     #$80
  1135:          sta     EIOFLG
  1136:          sta     ATNMOD

  1137:          jsr     ClearClockOut			; CLK hi, just in case
  1138:          jsr     SetDataOut			; DATA lo to acknowledge ATN
  1139:          lda     VBC_PB1
  1140:          ora     #VBC_PB1_1540_ATNA		; ack ATN, i.e. Data hi (except for SetDataOut above)
  1141:          sta     VBC_PB1
  1142:  L80F1:
  1143:          lda     VBC_PB1
  1144:          bpl     L815A				; is ATN high again? then branch
  1145:          and     #VBC_PB1_1540_CLOCKIN		
  1146:          bne     L80F1				; if CLK is still low, loop
  1147:  L80FA:
		; here ATN is low, and CLK is high

		; read byte from IEC
  1148:          jsr     L82CA

  1149:          cmp     #$3F				; is UNLISTEN?
  1150:          bne     L810D

		; UNLISTEN
  1151:          lda     BITCNT
  1152:          and     #$BF
  1153:          sta     BITCNT
  1154:          lda     #$00
  1155:          sta     LSNACT
  1156:          beq     L811B				; always, wait for ATN hi

  1157:  L810D:
  1158:          cmp     #$5F				; is UNTALK?
  1159:          bne     L811E

		; UNTALK
  1160:          lda     BITCNT
  1161:          and     #$BF
  1162:          sta     BITCNT
  1163:          lda     #$00
  1164:          sta     TLKACT
  1165:  L811B:
  1166:          jmp     L8192				; wait for ATN hi
  1167:  L811E:

  1168:          cmp     TLKADR				; is it our current TALK address?
  1169:          bne     L812C

		; received TALK
  1170:          lda     #$01
  1171:          sta     TLKACT
  1172:          lda     #$00
  1173:          sta     LSNACT
  1174:          beq     L8155				; always

  1175:  L812C:
  1176:          cmp     LSNADR				; is it our current LISTEN address?
  1177:          bne     L813A

		; received a LISTEN
  1178:          lda     #$01
  1179:          sta     LSNACT
  1180:          lda     #$00
  1181:          sta     TLKACT
  1182:          beq     L8155				; always

  1183:  L813A:
  1184:          tax
  1185:          and     #$60
  1186:          cmp     #$60				; is it a secondary address (includes $E0 close and $F0 open)?
  1187:          bne     L818D	

		; Secondary address
  1188:          txa
  1189:          sta     ORGSA
  1190:          and     #$0F
  1191:          sta     SA
  1192:          lda     ORGSA
  1193:          and     #$F0
  1194:          cmp     #$E0				; is CLOSE?
  1195:          bne     L8192

		; CLOSE
  1196:          cli                                     ; allow processing of job loop
  1197:          jsr     LDAC0
  1198:          sei                                     ; disallow interrupts --> blocking job loop

		; from TALK, LISTEN, CLOSE
  1199:  L8155:
  1200:          bit     VBC_PB1			; check ATN
  1201:          bmi     L80FA				; still low then branch to read next byte

		; after ATN processing
  1202:  L815A:
  1203:          lda     #$00
  1204:          sta     ATNMOD
  1205:          lda     VBC_PB1
  1206:          and     # ~ VBC_PB1_1540_ATNA		; DATA hi
  1207:          sta     VBC_PB1

  1208:          lda     LSNACT				; are we LISTENing?
  1209:          beq     L8177				; no -> branch
  1210:          bit     BITCNT				; bit is reset on UNTALK and UNLISTEN
  1211:          bvc     L8171				; if so, branch and skip sending FIEC marker byte
  1212:          jsr     L8199				; send FIEC marker byte
  1213:  L8171:
  1214:          jsr     L8342				; LISTEN processing, includes OPEN
  1215:          jmp     MainLoopEntry1570


  1216:  L8177:
  1217:          lda     TLKACT				; are we TALKing?
  1218:          beq     L818A				; no -> branch
  1219:          jsr     ClearDataOut
  1220:          jsr     SetClockOut
  1221:          jsr     LA483				; delay loop (ca 80 cycles)
  1222:          jsr     L81EA				; TALK processing, check if channel is open, and send data
  1223:          jsr     LA483				; delay loop (ca 80 cycles)
  1224:  L818A:
  1225:          jmp     L8366				; jump back to mainloop
  1226:  L818D:
  1227:          lda     #VBC_PB1_1540_ATNA
  1228:          sta     VBC_PB1

		; wait for ATN high
  1229:  L8192:
  1230:          bit     VBC_PB1
  1231:          bpl     L815A				; is ATN hi? Then branch to end of ATN processing
  1232:          bmi     L8192				; loop

		; process LISTEN
  1233:  L8199:
  1234:          jsr     TestATN
  1235:          jsr     ReadIecBusIn
  1236:          and     #VBC_PB1_1540_CLOCKIN		; wait for CLK high
  1237:          bne     L8199
  1238:          jsr     L81CE				; set CIA SR to output, 
  1239:          lda     #$00
  1240:          sta     CIA_SDR			; send byte $00 via SDR (keep DATA low, toggle fast Clk)
  1241:          lda     #CIA_ICR_B_SP
  1242:  L81AD:
  1243:          bit     CIA_ICR
  1244:          beq     L81AD				; wait for shift out to finish
  1245:  
		; fall-through

		; --------------------------------------------
		; reset fast IEC SDR (to input)
  1246:  L81B2:
  1247:          php
  1248:          sei                                     ; disallow interrupts --> blocking job loop

		; switch CIA SDR to input

  1249:          lda     CIA_CRA
  1250:          and     # ~ CIA_CRA_B_SP_OUTPUT
  1251:          sta     CIA_CRA

		; fast serial direction bit to input

  1253:          lda     VBC_PAUNBUF1
  1254:          and     # ~ VBC_PA1_02
  1255:          sta     VBC_PAUNBUF1
  1256:  
		; enable SDR irq

  1257:  .if CompileDrive >= DRIVE_1571_05
  1258:          lda     #CIA_ICR_BW_SET | CIA_ICR_B_SP
  1259:  .else
  1260:          lda     #CIA_ICR_BW_SET | CIA_ICR_B_TOD
  1261:  .endif
  1262:          sta     CIA_ICR
  1263:          bit     CIA_ICR
  1264:          plp
  1265:          rts


		; --------------------------------------------
		; set fast IEC SDR to output
  1267:  L81CE:
  1268:          php
  1269:          sei                                     ; disallow interrupts --> blocking job loop
  1270:          lda     VBC_PAUNBUF1
  1271:          ora     #VBC_PA1_02
  1272:          sta     VBC_PAUNBUF1
  1273:          lda     CIA_CRA
  1274:          ora     #CIA_CRA_B_SP_OUTPUT
  1275:          sta     CIA_CRA
  1276:          lda     #CIA_ICR_B_SP
  1277:          sta     CIA_ICR
  1278:          bit     CIA_ICR
  1279:          plp
  1280:          rts

		; --------------------------------------------
		; TALK processing
  1281:  L81EA:
  1282:          sei                                     ; disallow interrupts --> blocking job loop
  1283:          jsr     LD0EB				; check secondary address for open file
  1284:          bcs     L81F6				; not found -> return
  1285:  L81F0:
  1286:          ldx     LINDX
  1287:          lda     CHNRDY,x
  1288:          bmi     L81F7				; data available?
  1289:  L81F6:
  1290:          rts					; no, return
  1291:  L81F7:
  1292:          jsr     TestATN
  1293:          jsr     ReadIecBusIn
  1294:          and     #VBC_PB1_1540_DATAIN		; read DATA
  1295:          php
  1296:          jsr     ClearClockOut			; set CLK high
  1297:          plp
  1298:          beq     L8218				; if DATA was high, branch

  1299:  L8206:
  1300:          jsr     TestATN
  1301:          jsr     ReadIecBusIn
  1302:          and     #VBC_PB1_1540_DATAIN
  1303:          bne     L8206				; wait for DATA high

  1304:          ldx     LINDX
  1305:          lda     CHNRDY,x
  1306:          and     #$08				; is data available?
  1307:          bne     L822C

		; signal EOI?
  1308:  L8218:
  1309:          jsr     TestATN
  1310:          jsr     ReadIecBusIn
  1311:          and     #VBC_PB1_1540_DATAIN
  1312:          bne     L8218				; wait for DATA high
  1313:  L8222:
  1314:          jsr     TestATN
  1315:          jsr     ReadIecBusIn
  1316:          and     #VBC_PB1_1540_DATAIN
  1317:          beq     L8222				; wait for DATA low

  1318:  L822C:
  1319:          jsr     SetClockOut			; CLK low
  1320:          jsr     TestATN
  1321:          jsr     ReadIecBusIn
  1322:          and     #VBC_PB1_1540_DATAIN
  1323:          bne     L822C				; wait for DATA high

  1324:          bit     BITCNT				; are we FAST?
  1325:          bvc     L8276				; no, branch

		; fast TALK
  1326:          lda     VBC_PAUNBUF1
  1327:          ora     #VBC_PA1_02			; SDR to output
  1328:          sta     VBC_PAUNBUF1
  1329:          lda     CIA_CRA
  1330:          ora     #CIA_CRA_B_SP_OUTPUT
  1331:          sta     CIA_CRA
  1332:          bit     CIA_ICR
  1333:          ldx     LINDX
  1334:          lda     L023E,x
  1335:          sta     CIA_SDR			; send data via SDR
  1336:  L8258:
  1337:          lda     CIA_ICR
  1338:          and     #$08
  1339:          beq     L8258				; wait for SDR done

  1340:          lda     CIA_CRA
  1341:          and     # ~ CIA_CRA_B_SP_OUTPUT	; SDR back to input
  1342:          sta     CIA_CRA
  1343:          lda     VBC_PAUNBUF1
  1344:          and     # ~ VBC_PA1_02
  1345:          sta     VBC_PAUNBUF1
  1346:  .if CompileDrive >= DRIVE_1571_05
  1347:          lda     #CIA_ICR_BW_SET | CIA_ICR_B_SP
  1348:  .else
  1349:          lda     #CIA_ICR_BW_SET | CIA_ICR_B_TOD
  1350:  .endif
  1351:          sta     CIA_ICR
  1352:          bne     L82B2				; always

		; slow TALK
  1353:  L8276:
  1354:          lda     #$08
  1355:          sta     CONT
  1356:  L827A:
  1357:          jsr     ReadIecBusIn
  1358:          and     #VBC_PB1_1540_DATAIN
  1359:          bne     L82C4
  1360:  L8281:
  1361:          ldx     LINDX
  1362:          lda     L023E,x
  1363:          ror     a
  1364:          sta     L023E,x
  1365:          bcs     L8291
  1366:          jsr     SetDataOut
  1367:          bne     L8294
  1368:  L8291:
  1369:          jsr     ClearDataOut
  1370:  L8294:
  1371:          jsr     LA47E				; delay loop
  1372:          lda     DRVTRK + 1
  1373:  .if CompileDrive >= DRIVE_1571_05
  1374:          bne     L829E
  1375:  .else
  1376:          bne     L8281
  1377:  .endif
  1378:          jsr     LA483
  1379:  L829E:
  1380:          jsr     ClearClockOut
  1381:          jsr     LA47E
  1382:          lda     DRVTRK + 1
  1383:          bne     L82AB
  1384:          jsr     LA483
  1385:  L82AB:
  1386:          jsr     LFEFB
  1387:          dec     CONT				; next bit
  1388:          bne     L827A

		; end of byte send

  1389:  L82B2:
  1390:          jsr     TestATN
  1391:          jsr     ReadIecBusIn
  1392:          and     #VBC_PB1_1540_DATAIN
  1393:          beq     L82B2				; wait for DATA low

  1394:          cli                                     ; allow processing of job loop
  1395:          jsr     LD3AA
  1396:          sei                                     ; disallow interrupts --> blocking job loop
  1397:          jmp     L81F0				; next byte

  1398:  L82C4:
  1399:          jmp     L8362				; clear Fast flag etc, jump main loop


		; --------------------------------
		; read byte from IEC
  1400:  L82C7:
  1401:          bit     CIA_ICR
  1402:  L82CA:
  1403:          lda     #$08
  1404:          sta     CONT
  1405:  L82CE:
  1406:          jsr     TestATN
  1407:          jsr     ReadIecBusIn
  1408:          and     #VBC_PB1_1540_CLOCKIN		
  1409:          bne     L82CE				; wait for CLK high

  1410:          jsr     ClearDataOut			; DATA hi
  1411:          lda     #$01
  1412:  L82DD:
  1413:          bit     VBC_PB1
  1414:          bne     L82DD				; wait for DATA hi

  1415:  .if CompileDrive >= DRIVE_1571_05
  1416:          jsr     LAA76
  1417:  .else
  1418:          sta     VBC_T1HC1			; set timer T1 (1571_05+ sets to $0200 instead of $0100)
  1419:  .endif
  1420:  L82E5:
  1421:          jsr     TestATN
  1422:          lda     VBC_IFR1
  1423:          and     #$40				; timeout on T1?
  1424:          bne     L82F8				; yes then skip

  1425:          jsr     ReadIecBusIn
  1426:          and     #VBC_PB1_1540_CLOCKIN
  1427:          beq     L82E5				; loop if CLOCK is still high
  1428:          bne     L8311				; otherwise continue

		; EOI detected
  1429:  L82F8:
  1430:          jsr     SetDataOut
  1431:          ldx     #$18
  1432:  L82FD:
  1433:          dex
  1434:          bne     L82FD
  1435:          jsr     ClearDataOut
  1436:  L8303:
  1437:          jsr     TestATN
  1438:          jsr     ReadIecBusIn
  1439:          and     #VBC_PB1_1540_CLOCKIN
  1440:          beq     L8303
  1441:          lda     #$00
  1442:          sta     EIOFLG

		; read the actual data
  1443:  L8311:
  1444:          lda     VBC_PB1
  1445:          eor     #VBC_PB1_1540_DATAIN
  1446:          tax
  1447:          lda     CIA_ICR
  1448:          and     #CIA_ICR_B_SP			; did we receive a fast byte?
  1449:          beq     L8326				; no, then continue slow
  1450:          lda     CIA_SDR			; load data from SDR
  1451:          sta     DATA
  1452:          jmp     L833C				; continue

  1453:  L8326:
  1454:          txa					; register value from L8311, with DATA inverted
  1455:          lsr     a
  1456:          and     #$02				; is CLK low?
  1457:          bne     L8311				; yes loop back to SDR check

		; CLK is high, slow bit is received
  1458:          ror     DATA				; save bit
  1459:  L832E:
  1460:          jsr     TestATN
  1461:          jsr     ReadIecBusIn
  1462:          and     #VBC_PB1_1540_CLOCKIN
  1463:          beq     L832E				; wait CLK low
  1464:          dec     CONT
  1465:          bne     L8311

		; acknowledge byte by setting DATA low
  1466:  L833C:
  1467:          jsr     SetDataOut			; DATA low
  1468:          lda     DATA
  1469:          rts

		; ------------------------------------
		; LISTEN processing

  1470:  L8342:
  1471:          sei                                     ; disallow interrupts --> blocking job loop
  1472:          jsr     LD107
  1473:          bcs     L834D
  1474:          lda     CHNRDY,x
  1475:          ror     a
  1476:          bcs     L8358
  1477:  L834D:
  1478:          lda     ORGSA
  1479:          and     #$F0
  1480:          cmp     #$F0
  1481:          beq     L8358
  1482:          jmp     L8366
  1483:  L8358:
  1484:          jsr     L82C7				; read byte from IEC
  1485:          cli                                     ; allow processing of job loop
  1486:          jsr     LCFB7				; process byte
  1487:          jmp     L8342				
  1488:  L8362:
  1489:          lda     #$00
  1490:          sta     BITCNT
  1491:  L8366:
  1492:          lda     #0
  1493:          sta     VBC_PB1
  1494:  MainLoopEntry1570:
  1495:          jsr     L81B2
  1496:          jmp     MainLoopEntry


		; ==============================================
		; 1570 IRQ
		;
		; note that there are two interrupt routines that are changed using a vector
		; in the 1570+
		;
		; These are important as they set the FAST flag (BITCNT.6) when a byte
		; is received via CIA SDR
		;

		; ----------------------------------------------
		; first interrupt routine

  5928:  L9D88:
  5929:          pha
  5930:          txa
  5931:          pha
  5932:          tya
  5933:          pha
  5934:          lda     CIA_ICR
  5935:          and     #CIA_ICR_B_SP			; did we receive an SDR interrupt?
  5936:          beq     L9DBA				; no, skip

  5937:          bit     FLGMODE1570			; are we in 1570/1571 mode?
  5938:          bmi     L9DBA				; no, skip

  5939:          lda     VBC_PAUNBUF1
  5940:          ora     #VBC_PA1_20
  5941:          sta     VBC_PAUNBUF1			; set to 2 MHz?

  5942:          lda     #$DE				; set interrupt routine to second one
  5943:          sta     VIRQJOB1570
  5944:          lda     #$9D
  5945:          sta     VIRQJOB1570 + 1

  5946:          lda     #$40
  5947:          sta     VDC_T1HL2
  5948:          sta     VDC_T1HC2
  5949:          lda     #$00
  5950:          sta     NXTST
  5951:          jmp     L9DEA				; jump to 2nd interrupt routine

  5952:  L9DBA:
  5953:          lda     VBC_IFR1
  5954:          and     #$02
  5955:          beq     L9DC4
  5956:          jsr     SetATNPending                   ; Set the ATN pending flag to mark that the bus must be processed
  5957:  L9DC4:
  5958:          lda     VDC_IFR2
  5959:          asl     a
  5960:          bpl     L9DCD
  5961:          jsr     LF2B0
  5962:  L9DCD:
  5963:          tsx
  5964:          lda     L0104,x
  5965:          and     #$10
  5966:          beq     L9DD8
  5967:          jsr     LF2B0
  5968:  L9DD8:
  5969:          pla
  5970:          tay
  5971:          pla
  5972:          tax
  5973:          pla
  5974:          rti

		; ----------------------------------------------
		; second IRQ routine

  5975:  L9DDE:
  5976:          pha
  5977:          txa
  5978:          pha
  5979:          tya
  5980:          pha
  5981:          lda     CIA_ICR
  5982:          and     #CIA_ICR_B_SP
  5983:          beq     L9DF2
  5984:  L9DEA:
  5985:          lda     BITCNT
  5986:          ora     #$40
  5987:          sta     BITCNT
  5988:          bne     L9E14
  5989:  L9DF2:
  5990:          lda     VBC_IFR1
  5991:          and     #$02
  5992:          beq     L9E00
  5993:          bit     VBC_PA1
  5994:          lda     #$01
  5995:          sta     ATNPND
  5996:  L9E00:
  5997:          tsx
  5998:          lda     L0104,x
  5999:          and     #$10
  6000:          beq     L9E0B
  6001:          jsr     L92BA
  6002:  L9E0B:
  6003:          lda     VDC_IFR2
  6004:          asl     a
  6005:          bpl     L9E14
  6006:          jsr     L92BA
  6007:  L9E14:
  6008:          pla
  6009:          tay
  6010:          pla
  6011:          tax
  6012:          pla
  6013:          rti

